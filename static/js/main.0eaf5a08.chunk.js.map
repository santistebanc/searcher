{"version":3,"sources":["searchWorker.js","dataWorker.js","webpack:///./src/searchWorker.js?ccf7","webpack:///./src/dataWorker.js?4e3f","theme.js","data.js","models.js","searcher.js","utils/debounce.js","Homepage.js","App.js","serviceWorker.js","index.js"],"names":["inst","wrap","Worker","module","exports","f","this","colors","text","background","primary","secondary","accent","gray","fonts","body","heading","monospace","fontSizes","fontWeights","display","lineHeights","textStyles","fontFamily","fontWeight","lineHeight","variant","fontSize","letterSpacing","mt","DataState","defaults","create","id","throttle","local","isPersisted","throttlePersist","lodashThrottle","persist","doc","_id","constructor","getStorageId","dataWorker","get","name","console","error","field","now","Date","getTime","toString","dateCreated","newData","log","lastUpdated","latestDoc","put","res","_rev","rev","isLocal","DataWorker","Task","status","progress","priority","update","dateStarted","percentage","Math","round","finish","dateFinished","Index","data","length","searcher","search","func","wait","timeout","context","args","arguments","clearTimeout","Promise","r","resolve","setTimeout","apply","debounce","query","limit","a","async","searchWorker","searchQuery","resIndices","searchResult","map","ind","deu_phrases","find","ph","startIndexing","connectToStore","index","time","importIndex","timeEnd","task","updateProgressCallback","updateProgress","updateProgressProxy","Comlink","start","then","exportIndex","write","useState","searchInput","setSearchInput","suggestions","setSuggestions","searcherInstance","useMemo","as","onSubmit","e","preventDefault","flex","width","value","onChange","val","target","cancel","flexShrink","flexBasis","minWidth","type","backgroundColor","flexDirection","suggestion","i","key","App","theme","styles","css","Homepage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"u02hmCAAA,IAAgYA,EAA5XC,EAAO,EAAQ,IAAWA,KAAKC,EAAS,EAAQ,IAAiVC,EAAOC,QAAU,SAASC,IAAK,OAAIC,gBAAgBD,EAAUJ,EAAKC,KAAiBF,IAASA,EAAOC,EAAKC,Q,mBCA7e,IAA8XF,EAA1XC,EAAO,EAAQ,IAAWA,KAAKC,EAAS,EAAQ,IAA+UC,EAAOC,QAAU,SAASC,IAAK,OAAIC,gBAAgBD,EAAUJ,EAAKC,KAAiBF,IAASA,EAAOC,EAAKC,Q,uDCA3eC,EAAOC,QAAU,WACf,OAAO,IAAIF,OAAO,IAA0B,oC,mBCD9CC,EAAOC,QAAU,WACf,OAAO,IAAIF,OAAO,IAA0B,oC,mGCD/B,GACbK,OAAQ,CACNC,KAAM,OACNC,WAAY,OACZC,QAAS,OACTC,UAAW,OACXC,OAAQ,OACRC,KAAM,QAERC,MAAO,CACLC,KAAM,mBACNC,QAAS,UACTC,UAAW,oBAEbC,UAAW,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5CC,YAAa,CACXJ,KAAM,IACNC,QAAS,IACTI,QAAS,KAEXC,YAAa,CACXN,KAAM,IACNC,QAAS,MAEXM,WAAY,CACVN,QAAS,CACPO,WAAY,UACZC,WAAY,UACZC,WAAY,WAEdL,QAAS,CACPM,QAAS,qBACTC,SAAU,CAAC,EAAG,GACdH,WAAY,UACZI,cAAe,UACfC,GAAI,K,6JChCGC,EAAb,WAGE,aAAe,yBADfC,SAAW,GAETzB,KAAK0B,SAJT,qMAMgE,GAAvCC,EANzB,EAMyBA,GANzB,IAM6BC,gBAN7B,MAMwC,IANxC,MAM8CC,aAN9C,SAOI7B,KAAK8B,aAAc,EACnB9B,KAAK+B,gBAAkBC,IAAehC,KAAKiC,QAASL,GACpD5B,KAAKkC,IAAIC,IAAMnC,KAAKoC,YAAYC,aAAaV,EAAIE,GATrD,4BAWwB7B,KAAKoC,YAAYE,WAAWC,IAAIvC,KAAKkC,IAAIC,MAXjE,OAWYD,EAXZ,OAYMlC,KAAKkC,IAAMA,EAZjB,qDAcuB,cAAb,KAAIM,KAdd,0CAeexC,KAAKiC,QAAQjC,KAAKkC,MAfjC,QAiBQO,QAAQC,MAAM,4CAAd,MAjBR,iCAoBW1C,MApBX,qFAyBM2C,GACF,OAAO3C,KAAKkC,IAAIS,KA1BpB,+BA6BI,IAAMC,GAAM,IAAIC,MAAOC,UAMvB,OALA9C,KAAKkC,IAAL,aACEC,IAAKS,EAAIG,WACTC,YAAaJ,GACV5C,KAAKyB,UAEHzB,OAnCX,6BAqCSiD,GACLR,QAAQS,IAAI,WAAYD,GACxB,IAAML,GAAM,IAAIC,MAAOC,UAOvB,OANA9C,KAAKkC,IAAL,eACKlC,KAAKkC,IADV,CAEEiB,YAAaP,GACVK,GAEDjD,KAAK8B,aAAa9B,KAAK+B,kBACpB/B,OA9CX,8BAgDgBkC,GAhDhB,6EAiDIO,QAAQS,IAAI,iBAjDhB,cAoDQhB,EApDR,+CAoDsBlC,KAAKoC,YAAYE,WAAWC,IAAIvC,KAAKkC,IAAIC,MApD/D,iCAmDYiB,EAnDZ,yBAqDwBpD,KAAKoC,YAAYE,WAAWe,IAA5B,eACbD,EADa,GAEbpD,KAAKkC,OAvDhB,QAqDYoB,EArDZ,OAyDMtD,KAAKkC,IAAIqB,KAAOD,EAAIE,IACpBf,QAAQS,IAAI,uBA1DlB,kDA4DMT,QAAQC,MAAM,iCAAkCR,EAAIC,IAApD,MA5DN,iCA8DWnC,MA9DX,gGAsBsB2B,EAAI8B,GACtB,MAAM,GAAN,OAAUA,EAAU,UAAY,IAAhC,OAAqCzD,KAAKwC,KAA1C,YAAkDb,OAvBtD,KAAaH,EACJc,WAAa,IAAIoB,ICFnB,IAAMC,EAAb,2MACElC,SAAW,CACTmC,OAAQ,QACRC,SAAU,EACVC,SAAU,GAJd,uEAUI,IAAMlB,GAAM,IAAIC,MAAOC,UAKvB,OAJA9C,KAAK+D,OAAO,CACVC,YAAapB,EACbgB,OAAQ,eAEH5D,OAfX,qCAiBiB6D,GACb,IAAMI,EAAaC,KAAKC,MAAMN,GAS9B,OARApB,QAAQS,IAAI,oBAAqBe,GACd,MAAfA,EACFjE,KAAKoE,SAELpE,KAAK+D,OAAO,CACVF,SAAUI,IAGPjE,OA3BX,+BA8BI,IAAM4C,GAAM,IAAIC,MAAOC,UAMvB,OALA9C,KAAK+D,OAAO,CACVM,aAAczB,EACdgB,OAAQ,WACRC,SAAU,MAEL7D,OApCX,8BA0CI,OAHAA,KAAK+D,OAAO,CACVH,OAAQ,WAEH5D,OA1CX,+BAkDI,MAL2B,WAAvBA,KAAKuC,IAAI,WACXvC,KAAK+D,OAAO,CACVH,OAAQ,eAGL5D,OAlDX,6BAOI,OAAOA,KAAKuC,IAAI,cAPpB,GAA0Bf,GAsDb8C,EAAb,8KAOQC,EAAMC,GAKV,OAJAxE,KAAK+D,OAAO,CACVQ,OACAC,WAEKxE,OAZX,6BAEI,OAAOA,KAAKuC,IAAI,YAFpB,2BAKI,OAAOvC,KAAKuC,IAAI,YALpB,GAA2Bf,GClDNiD,E,WACnB,aAAe,IAAD,gCA0CdC,OCjDa,SAAkBC,EAAMC,GACrC,IAAIC,EACJ,OAAO,WACL,IAAMC,EAAU9E,KACV+E,EAAOC,UACb,OAAgB,IAAZD,EAAK,IACPE,aAAaJ,GACN,IAAIK,SAAQ,SAAAC,QAEd,IAAID,SAAQ,SAAAE,GAMjBH,aAAaJ,GACbA,EAAUQ,YANI,WACZR,EAAU,KACV,IAAMvB,EAAMqB,EAAKW,MAAMR,EAASC,GAChCK,EAAQ9B,KAGkBsB,ODiCvBW,EAAS,SAAOC,EAAOC,GAAd,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACS,EAAKE,aAAaC,YAAYL,EAAOC,IAD9C,cACVK,EADU,OAEhB,EAAKC,aAAeD,EAAWE,KAAI,SAAAC,GAAG,OACpCC,EAAYC,MAAK,SAAAC,GAAE,OAAIA,EAAGzE,KAAOsE,QAHnB,kBAKT,EAAKF,cALI,uCAMf,KA/CD/F,KAAK4F,aAAe,IAAIA,IACxB5F,KAAKqG,gB,8KAIe,IAAI/B,GAAQgC,eAAe,CAC7C3E,GAAI,oBACJC,SAAU,IACVC,OAAO,K,UAHH0E,E,OAKN9D,QAAQS,IAAI,eAAgBqD,EAAM/B,SAC9B+B,EAAM/B,O,wBACFD,EAAOgC,EAAMhC,KACnB9B,QAAQ+D,KAAK,gB,mBACPxG,KAAK4F,aAAaa,YAAYlC,I,OACpC9B,QAAQiE,QAAQ,gB,oDAEG,IAAI/C,GAAO2C,eAAe,CAC3C3E,GAAI,gBACJC,SAAU,IACVC,OAAO,K,QAHH8E,E,OAMAC,EAAyB,SAAA/C,GAC7B8C,EAAKE,eAAehD,IAGhBiD,EAAsBC,QAAcH,GAE1CD,EAAKK,QACLhH,KAAK4F,aAAaW,MAAMO,GAAqBG,MAAK,SAAAzC,GAChD/B,QAAQ+D,KAAK,gBACb,EAAKZ,aAAasB,cAAcD,MAAK,SAAA1C,GACnC9B,QAAQiE,QAAQ,gBAChBH,EAAMY,MAAM5C,EAAMC,GAClB/B,QAAQS,IAAI,wBAAyBqD,EAAM/B,c,mJAejDxE,KAAK0E,QAAO,G,wDErDD,aAAO,IAAD,EACmB0C,mBAAS,IAD5B,mBACZC,EADY,KACCC,EADD,OAEmBF,mBAAS,IAF5B,mBAEZG,EAFY,KAECC,EAFD,KAGbC,EAAmBC,mBAAQ,kBAAM,IAAIjD,IAAY,IAavD,OACE,kBAAC,IAAD,CAAKkD,GAAG,OAAOC,SAJI,SAAMC,GAAN,SAAAnC,EAAAC,OAAA,gDACnBkC,EAAEC,iBADiB,uCAKjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,KAAM,EAAGC,MAAO,IACnB,kBAAC,IAAD,CAAOC,MAAOZ,EAAaa,SAhBT,SAAAL,GACxB,IAAMM,EAAMN,EAAEO,OAAOH,MACrBX,EAAea,GACXA,EAAI3D,OAAS,EACfiD,EAAiB/C,OAAOyD,EAAK,IAAIlB,MAAK,SAAA3D,GAAG,OAAIkE,EAAelE,MAE5DmE,EAAiBY,aAYf,kBAAC,IAAD,CACEjH,QAAQ,SACRkH,WAAY,EACZC,UAAU,MACVC,SAAS,OACTC,KAAK,SACLR,MAAM,SACNS,gBAAgB,aAGpB,kBAAC,IAAD,CAAMC,cAAc,UACjBpB,EAAYvB,KAAI,SAAC4C,EAAYC,GAAb,OACf,kBAAC,IAAD,CAAMC,IAAKD,GAAID,EAAW1I,Y,2QCZrB6I,MArBf,WACE,OACE,kBAAC,IAAD,CAAeC,MAAOA,GACpB,kBAAC,IAAD,CACEC,OAAQC,YAAF,IAEaF,EAAMxI,MAAMC,QAUjC,kBAAC0I,EAAD,QCVcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,kB","file":"static/js/main.0eaf5a08.chunk.js","sourcesContent":["var wrap = require('comlink').wrap,Worker = require(\"!worker-loader?{}!C:/projects/searcher/node_modules/comlink-loader/dist/comlink-worker-loader.js!C:\\\\projects\\\\searcher\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js??ref--6-oneOf-1!C:\\\\projects\\\\searcher\\\\node_modules\\\\eslint-loader\\\\dist\\\\cjs.js??ref--5-0!C:\\\\projects\\\\searcher\\\\src\\\\searchWorker.js\"),inst;module.exports = function f() {if (this instanceof f) return wrap(Worker());return inst || (inst = wrap(Worker()));};","var wrap = require('comlink').wrap,Worker = require(\"!worker-loader?{}!C:/projects/searcher/node_modules/comlink-loader/dist/comlink-worker-loader.js!C:\\\\projects\\\\searcher\\\\node_modules\\\\react-scripts\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js??ref--6-oneOf-1!C:\\\\projects\\\\searcher\\\\node_modules\\\\eslint-loader\\\\dist\\\\cjs.js??ref--5-0!C:\\\\projects\\\\searcher\\\\src\\\\dataWorker.js\"),inst;module.exports = function f() {if (this instanceof f) return wrap(Worker());return inst || (inst = wrap(Worker()));};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"7a8167aa2d3599d0573c.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"2f7c8977b5f2f1f2c48a.worker.js\");\n};","export default {\r\n  colors: {\r\n    text: \"#000\",\r\n    background: \"#fff\",\r\n    primary: \"#ccf\",\r\n    secondary: \"#119\",\r\n    accent: \"#639\",\r\n    gray: \"#666\"\r\n  },\r\n  fonts: {\r\n    body: \"Muli, sans-serif\",\r\n    heading: \"inherit\",\r\n    monospace: \"Menlo, monospace\"\r\n  },\r\n  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72],\r\n  fontWeights: {\r\n    body: 400,\r\n    heading: 700,\r\n    display: 900\r\n  },\r\n  lineHeights: {\r\n    body: 1.5,\r\n    heading: 1.25\r\n  },\r\n  textStyles: {\r\n    heading: {\r\n      fontFamily: \"heading\",\r\n      fontWeight: \"heading\",\r\n      lineHeight: \"heading\"\r\n    },\r\n    display: {\r\n      variant: \"textStyles.heading\",\r\n      fontSize: [5, 6],\r\n      fontWeight: \"display\",\r\n      letterSpacing: \"-0.03em\",\r\n      mt: 3\r\n    }\r\n  },\r\n};\r\n","import DataWorker from \"comlink-loader!./dataWorker\"; // eslint-disable-line import/no-webpack-loader-syntax\r\nimport lodashThrottle from \"lodash/throttle\";\r\n\r\nexport class DataState {\r\n  static dataWorker = new DataWorker();\r\n  defaults = {};\r\n  constructor() {\r\n    this.create();\r\n  }\r\n  async connectToStore({ id, throttle = 5000, local = false } = {}) {\r\n    this.isPersisted = true;\r\n    this.throttlePersist = lodashThrottle(this.persist, throttle);\r\n    this.doc._id = this.constructor.getStorageId(id, local);\r\n    try {\r\n      const doc = await this.constructor.dataWorker.get(this.doc._id);\r\n      this.doc = doc;\r\n    } catch (err) {\r\n      if (err.name === \"not_found\") {\r\n        return this.persist(this.doc);\r\n      } else {\r\n        console.error(\"error at get in connectToStore in pouchdb\", err);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n  static getStorageId(id, isLocal) {\r\n    return `${isLocal ? \"_local/\" : \"\"}${this.name}/${id}`;\r\n  }\r\n  get(field) {\r\n    return this.doc[field];\r\n  }\r\n  create() {\r\n    const now = new Date().getTime();\r\n    this.doc = {\r\n      _id: now.toString(),\r\n      dateCreated: now,\r\n      ...this.defaults\r\n    };\r\n    return this;\r\n  }\r\n  update(newData) {\r\n    console.log(\"updating\", newData);\r\n    const now = new Date().getTime();\r\n    this.doc = {\r\n      ...this.doc,\r\n      lastUpdated: now,\r\n      ...newData\r\n    };\r\n    if (this.isPersisted) this.throttlePersist();\r\n    return this;\r\n  }\r\n  async persist(doc) {\r\n    console.log('persisting...')\r\n    try {\r\n      const latestDoc =\r\n        doc || (await this.constructor.dataWorker.get(this.doc._id));\r\n      const res = await this.constructor.dataWorker.put({\r\n        ...latestDoc,\r\n        ...this.doc\r\n      });\r\n      this.doc._rev = res.rev;\r\n      console.log('persisting finished')\r\n    } catch (err) {\r\n      console.error(\"error at persisting to pouchdb\", doc._id, err);\r\n    }\r\n    return this;\r\n  }\r\n}\r\n","import { DataState } from \"./data\";\r\n\r\nexport class Task extends DataState {\r\n  defaults = {\r\n    status: \"fresh\",\r\n    progress: 0,\r\n    priority: 0\r\n  };\r\n  get status() {\r\n    return this.get(\"status\");\r\n  }\r\n  start() {\r\n    const now = new Date().getTime();\r\n    this.update({\r\n      dateStarted: now,\r\n      status: \"inProgress\"\r\n    });\r\n    return this;\r\n  }\r\n  updateProgress(progress) {\r\n    const percentage = Math.round(progress);\r\n    console.log(\"progress updated \", percentage);\r\n    if (percentage === 100) {\r\n      this.finish();\r\n    } else {\r\n      this.update({\r\n        progress: percentage\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n  finish() {\r\n    const now = new Date().getTime();\r\n    this.update({\r\n      dateFinished: now,\r\n      status: \"finished\",\r\n      progress: 100\r\n    });\r\n    return this;\r\n  }\r\n  pause() {\r\n    this.update({\r\n      status: \"paused\"\r\n    });\r\n    return this;\r\n  }\r\n  resume() {\r\n    if (this.get(\"status\") === \"paused\") {\r\n      this.update({\r\n        status: \"inProgress\"\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class Index extends DataState {\r\n  get length() {\r\n    return this.get(\"length\");\r\n  }\r\n  get data() {\r\n    return this.get(\"data\");\r\n  }\r\n  write(data, length) {\r\n    this.update({\r\n      data,\r\n      length\r\n    });\r\n    return this;\r\n  }\r\n}\r\n","import deu_phrases from \"./phrases/phrases.deu.json\";\r\nimport searchWorker from \"comlink-loader!./searchWorker\"; // eslint-disable-line import/no-webpack-loader-syntax\r\nimport debounce from \"./utils/debounce\";\r\nimport * as Comlink from \"comlink\";\r\nimport { Task, Index } from \"./models\";\r\n\r\nexport default class searcher {\r\n  constructor() {\r\n    this.searchWorker = new searchWorker();\r\n    this.startIndexing();\r\n  }\r\n\r\n  async startIndexing() {\r\n    const index = await new Index().connectToStore({\r\n      id: \"deu_phrases_index\",\r\n      throttle: 10000,\r\n      local: true\r\n    });\r\n    console.log(\"index length\", index.length);\r\n    if (index.length) {\r\n      const data = index.data;\r\n      console.time(\"import index\");\r\n      await this.searchWorker.importIndex(data);\r\n      console.timeEnd(\"import index\");\r\n    } else {\r\n      const task = await new Task().connectToStore({\r\n        id: \"index-phrases\",\r\n        throttle: 10000,\r\n        local: true\r\n      });\r\n\r\n      const updateProgressCallback = progress => {\r\n        task.updateProgress(progress);\r\n      };\r\n\r\n      const updateProgressProxy = Comlink.proxy(updateProgressCallback);\r\n\r\n      task.start();\r\n      this.searchWorker.index(updateProgressProxy).then(length => {\r\n        console.time(\"export index\");\r\n        this.searchWorker.exportIndex().then(data => {\r\n          console.timeEnd(\"export index\");\r\n          index.write(data, length);\r\n          console.log(\"..................yea\", index.length);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  search = debounce(async (query, limit) => {\r\n    const resIndices = await this.searchWorker.searchQuery(query, limit);\r\n    this.searchResult = resIndices.map(ind =>\r\n      deu_phrases.find(ph => ph.id === ind)\r\n    );\r\n    return this.searchResult;\r\n  }, 300);\r\n\r\n  async cancel() {\r\n    this.search(false);\r\n  }\r\n}\r\n","export default function debounce(func, wait) {\r\n  let timeout;\r\n  return function() {\r\n    const context = this;\r\n    const args = arguments;\r\n    if (args[0] === false) {\r\n      clearTimeout(timeout);\r\n      return new Promise(r => {});\r\n    }\r\n    return new Promise(resolve => {\r\n      const later = function() {\r\n        timeout = null;\r\n        const res = func.apply(context, args);\r\n        resolve(res);\r\n      };\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(later, wait);\r\n    });\r\n  };\r\n}\r\n","import React, { useState, useMemo } from \"react\";\r\nimport { Box, Flex, Text } from \"rebass\";\r\nimport { Input } from \"@rebass/forms\";\r\nimport searcher from \"./searcher\";\r\n\r\nexport default () => {\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const searcherInstance = useMemo(() => new searcher(), []);\r\n  const handleInputChange = e => {\r\n    const val = e.target.value;\r\n    setSearchInput(val);\r\n    if (val.length > 0) {\r\n      searcherInstance.search(val, 50).then(res => setSuggestions(res));\r\n    } else {\r\n      searcherInstance.cancel();\r\n    }\r\n  };\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n  };\r\n  return (\r\n    <Box as=\"form\" onSubmit={handleSubmit}>\r\n      <Flex>\r\n        <Box flex={1} width={7 / 10}>\r\n          <Input value={searchInput} onChange={handleInputChange} />\r\n        </Box>\r\n        <Input\r\n          variant=\"button\"\r\n          flexShrink={1}\r\n          flexBasis=\"2em\"\r\n          minWidth=\"auto\"\r\n          type=\"submit\"\r\n          value=\"Search\"\r\n          backgroundColor=\"primary\"\r\n        />\r\n      </Flex>\r\n      <Flex flexDirection=\"column\">\r\n        {suggestions.map((suggestion, i) => (\r\n          <Text key={i}>{suggestion.text}</Text>\r\n        ))}\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport { Global, css } from \"@emotion/core\";\nimport theme from \"./theme\";\nimport Homepage from \"./Homepage\";\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Global\n        styles={css`\n          body {\n            font-family: ${theme.fonts.body};\n          }\n          input,\n          select,\n          textarea,\n          button {\n            font-family: inherit;\n          }\n        `}\n      />\n      <Homepage />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}